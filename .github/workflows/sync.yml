name: RSS to OneNote Sync

on:
  schedule:
    - cron: '0 * * * *'   # 每小时第 0 分钟运行
  workflow_dispatch:       # 允许手动触发

# 关键1：防止并发运行互相覆盖状态文件
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  sync:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # 为 rebase 提供完整历史

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # 关键2：运行前，先解密上次保存的状态文件
      - name: Decrypt state files (if present)
        env:
          STATE_KEY: ${{ secrets.STATE_KEY }}
        run: |
          set -e
          if [ -f token_cache.enc ]; then
            openssl enc -d -aes-256-cbc -pbkdf2 -in token_cache.enc -out token_cache.bin -pass pass:"$STATE_KEY" || echo "token_cache.enc decryption failed or file is empty."
          fi
          if [ -f processed_items.enc ]; then
            openssl enc -d -aes-256-cbc -pbkdf2 -in processed_items.enc -out processed_items.txt -pass pass:"$STATE_KEY" || echo "processed_items.enc decryption failed or file is empty."
          fi
      
      - name: Run Python Script to Sync RSS
        env:
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ONENOTE_SECTION_NAME: ${{ secrets.ONENOTE_SECTION_NAME }}
          CI: true
        run: python -u rss_to_onenote.py

      # 关键3：运行后，将新生成的状态文件加密并提交
      - name: Encrypt and Commit State Files
        if: always() # 确保即使脚本失败，也尝试保存已处理的进度
        env:
          STATE_KEY: ${{ secrets.STATE_KEY }}
        run: |
          set -e
          
          # 加密文件
          if [ -f token_cache.bin ]; then
            openssl enc -aes-256-cbc -pbkdf2 -salt -in token_cache.bin -out token_cache.enc -pass pass:"$STATE_KEY"
            rm -f token_cache.bin
          fi
          if [ -f processed_items.txt ]; then
            openssl enc -aes-256-cbc -pbkdf2 -salt -in processed_items.txt -out processed_items.enc -pass pass:"$STATE_KEY"
            rm -f processed_items.txt
          fi
          
          # 配置 Git
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          
          # 添加加密后的文件
          git add token_cache.enc processed_items.enc || true
          
          # 如果没有文件变动，则不提交
          if git diff-index --quiet HEAD; then
            echo "No changes in state files to commit."
            exit 0
          fi
          
          # 提交前先同步远程更改，解决 fetch-first 冲突
          git pull --rebase origin main
          git commit -m "Update encrypted state files"
          git push origin main
