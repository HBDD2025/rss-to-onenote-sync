name: RSS to OneNote Sync

on:
  schedule:
    - cron: '0 2,6,10,18 * * *'  # 北京时间 10:00, 14:00, 18:00, 2:00 (次日)；基于 UTC 时间
  workflow_dispatch:  # 支持手动触发

concurrency:
  group: rss-to-onenote-state
  cancel-in-progress: false  # 防止并发覆盖状态文件

jobs:
  sync:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 获取完整历史，用于 Git 操作

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Decrypt state files (if any)
        run: |
          if [ -f token_cache.enc ]; then
            openssl enc -aes-256-cbc -pbkdf2 -d -in token_cache.enc -out token_cache.bin -pass pass:"$STATE_KEY"
          fi
          if [ -f processed_items.enc ]; then
            openssl enc -aes-256-cbc -pbkdf2 -d -in processed_items.enc -out processed_items.txt -pass pass:"$STATE_KEY"
          fi
        shell: bash
        env:
          STATE_KEY: ${{ secrets.STATE_KEY }}

      - name: Sanity check token cache
        run: |
          if [ -f token_cache.enc ]; then
            echo "[check] token_cache.enc size:" $(wc -c < token_cache.enc)
          else
            echo "[check] token_cache.enc NOT found"
          fi
          if [ -f token_cache.bin ]; then
            echo "[check] token_cache.bin size:" $(wc -c < token_cache.bin)
            python - <<'PY'
          import json, msal
          from msal_extensions import FilePersistence, PersistedTokenCache
          p = FilePersistence("token_cache.bin")
          cache = PersistedTokenCache(p); cache.reload()
          app = msal.PublicClientApplication("dummy", token_cache=cache, authority="https://login.microsoftonline.com/consumers")
          accts = app.get_accounts()
          print("[check] accounts in cache:", [a.get("username") for a in accts])
          print("[check] raw_cache_size:", len(cache.serialize()))
          PY
          else
            echo "[check] token_cache.bin NOT found after decrypt"
          fi
        shell: bash

      - name: Run sync
        run: python rss_to_onenote.py
        env:
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ONENOTE_SECTION_NAME: ${{ secrets.ONENOTE_SECTION_NAME }}
          # 可选：如果需要覆盖默认 MAX_ITEMS_PER_RUN
          # MAX_ITEMS_PER_RUN: 50

      - name: Encrypt & Push encrypted state files
        run: |
          set -e

          # 加密文件
          if [ -f token_cache.bin ]; then
            openssl enc -aes-256-cbc -pbkdf2 -salt -in token_cache.bin -out token_cache.enc -pass pass:"$STATE_KEY"
            rm -f token_cache.bin
          fi
          if [ -f processed_items.txt ]; then
            openssl enc -aes-256-cbc -pbkdf2 -salt -in processed_items.txt -out processed_items.enc -pass pass:"$STATE_KEY"
            rm -f processed_items.txt
          fi

          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

          git add token_cache.enc processed_items.enc || true

          if git diff-index --quiet HEAD; then
            echo "No changes in state files to commit."
            exit 0
          fi

          # 先提交更改（如果有），清空暂存区
          git commit -m "Update encrypted state files" || true  # || true 以防无更改

          # 现在 pull --rebase（暂存区已干净）
          git pull --rebase origin main

          # 推送更新（rebase 后可能有新历史）
          git push origin main
        shell: bash
        env:
          STATE_KEY: ${{ secrets.STATE_KEY }}
