name: RSS to OneNote Sync

on:
  schedule:
    - cron: '0 * * * *'   # 每小时第 0 分运行
  workflow_dispatch:       # 允许手动触发

# 防止并发运行互相覆盖状态文件
concurrency:
  group: rss-to-onenote-sync-state
  cancel-in-progress: true

jobs:
  sync:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Python Script to Sync RSS
        env:
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ONENOTE_SECTION_NAME: ${{ secrets.ONENOTE_SECTION_NAME }}
          CI: true
        run: python -u rss_to_onenote.py

      # 用你的 STATE_KEY 把状态文件加密
      - name: Encrypt state files
        if: always()
        run: |
          set -e
          if [ -f token_cache.bin ]; then
            openssl enc -aes-256-cbc -pbkdf2 -salt \
              -in token_cache.bin -out token_cache.enc \
              -pass pass:"${{ secrets.STATE_KEY }}"
          fi
          if [ -f processed_items.txt ]; then
            openssl enc -aes-256-cbc -pbkdf2 -salt \
              -in processed_items.txt -out processed_items.enc \
              -pass pass:"${{ secrets.STATE_KEY }}"
          fi

      - name: Commit and Push encrypted state
        if: always()
        run: |
          set -e
          git config --global user.name  'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

          # 只添加加密后的文件
          git add token_cache.enc processed_items.enc 2>/dev/null || true

          if git diff --cached --quiet; then
            echo "No encrypted state changes to commit."
            exit 0
          fi

          git commit -m "Update encrypted state files"
          # 关键：先 rebase 把远端最新提交并入，再推送
          git pull --rebase origin main
          git push origin HEAD:main
